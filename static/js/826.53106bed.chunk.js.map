{"version":3,"file":"static/js/826.53106bed.chunk.js","mappings":"0LASIA,EAA6B,SAACC,GAAD,MAA4D,CACzFC,OAAQD,EAAME,KAAKD,SAevB,IAZA,SAA6BE,GASzB,OADwCC,EAAAA,EAAAA,IAAQL,EAARK,EAPxC,SAA2BC,GACvB,IAAKJ,EAAwBI,EAAxBJ,OAAWK,GAAhB,OAA6BD,EAA7B,GACA,OAAKJ,GAEE,SAACE,GAAD,UAAeG,KAFF,SAAC,KAAD,CAAUC,GAAI,gB,8ECf1C,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCSnKC,EAAa,SAACH,GAEvB,IAAII,EAAO,YAAcJ,EAAMK,GAC/B,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,SAAC,KAAD,CAASL,GAAIE,EAAb,SAAoBJ,EAAMQ,UCFtC,EANuB,SAACR,GACpB,OACI,gBAAKM,UAAWC,EAAAA,QAAhB,SAA4BP,EAAMS,W,uCCyBpCC,GAAYC,EAAAA,EAAAA,GAAiB,IAiB7BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAhB4C,SAACb,GACrE,OACI,kBAAMe,SAAUf,EAAMgB,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAASX,GACpBF,KAAM,iBAAkBc,YAAa,0BAGhD,0BACI,6CAOhB,EAvCgB,SAACtB,GAGb,IAAIuB,EAAiBvB,EAAMwB,aAAaC,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACxB,EAAD,CAAuBE,GAAIsB,EAAEtB,GAAIG,KAAMmB,EAAEnB,MAAxBmB,EAAEtB,OACxEuB,EAAiB5B,EAAMwB,aAAaK,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAoBrB,QAASqB,EAAErB,SAAjBqB,EAAEzB,OAK1E,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKgB,KAEL,gBAAKjB,UAAWC,EAAAA,SAAhB,UACI,yBAAMqB,OAEV,SAAChB,EAAD,CAAqBG,SAXT,SAACgB,GACjB/B,EAAMgC,YAAYD,EAAOE,uB,uCCajC,GAAeC,EAAAA,EAAAA,KACXnC,EAAAA,EAAAA,KAjBoB,SAACJ,GACrB,MAAO,CACH6B,aAAc7B,EAAM6B,iBAKD,SAACW,GACxB,MAAO,CACHH,YAAa,SAACC,GACVE,GAASC,EAAAA,EAAAA,IAAqBH,SAOQI,EAAAA,EADlD,CAEEC","sources":["HOC/withAuthRedirect.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/Message/DialogsContainer.tsx"],"sourcesContent":["import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nexport type mapStatePropsTypeForRedirect = {\r\n    isAuth: boolean\r\n}\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType): mapStatePropsTypeForRedirect => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nfunction WithAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n    function RedirectComponent(props: mapStatePropsTypeForRedirect) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponentHOC = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponentHOC\r\n};\r\n\r\nexport default WithAuthRedirect;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__fLdt5\",\"dialogs_item\":\"Dialogs_dialogs_item__uIaN-\",\"active\":\"Dialogs_active__8+QGs\",\"messages\":\"Dialogs_messages__UsDGN\",\"message\":\"Dialogs_message__LbAcf\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\n\r\nexport type DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n}\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./Message/DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControl/FormControl\";\r\nimport {maxLenghtCreator, required} from \"../../utils/validators/index.\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody:string\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n\r\n    let dialogsElement = props.dialogsPages.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    let messageElement = props.dialogsPages.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    let addNewMessage = (values: FormDataType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_item}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElement}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\nconst maxLength50=maxLenghtCreator(50)\r\nexport const AddMessageForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required,maxLength50]}\r\n                       name={'newMessageBody'} placeholder={'enter your message'}/>\r\n\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\nexport default Dialogs;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport Dialogs from \"../Dialogs\";\r\nimport { DialogsPagesType} from \"../../../redux/store\";\r\nimport {sendNewMessageTextAC} from \"../../../redux/Dialogs_Page_reduser\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport WithAuthRedirect from \"../../../HOC/withAuthRedirect\";\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPages: DialogsPagesType\r\n\r\n}\r\ntype mapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody:string) => void\r\n}\r\nconst mapStateToProps = (state: AppRootStateType): mapStateToPropsType => {\r\n    return {\r\n        dialogsPages: state.dialogsPages,\r\n\r\n    }\r\n}\r\nexport type DialogsPropsType = mapDispatchToPropsType & mapStateToPropsType\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(sendNewMessageTextAC(newMessageBody))\r\n        },\r\n\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps), WithAuthRedirect\r\n)(Dialogs)"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","Component","connect","props","restProps","to","DialogItem","path","id","className","s","name","message","maxLength50","maxLenghtCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","dialogsElement","dialogsPages","dialogs","map","d","messageElement","messages","m","values","sendMessage","newMessageBody","compose","dispatch","sendNewMessageTextAC","WithAuthRedirect","Dialogs"],"sourceRoot":""}